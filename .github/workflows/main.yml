name: "Build"

on:
  release:
    types: [created]

jobs:
  # build all the image variants
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # amd64 builds (Alpine)
          - name: amd64
            os: ubuntu-latest
            TARGET_IMAGE: oznu/s6-node
            BASE_IMAGE: library/alpine
            DOCKERFILE: Dockerfile
            QEMU_ARCH: x86_64
            TAG_SUFFIX: amd64

          # arm32v6 builds (Alpine)
          - name: arm32v6
            os: ubuntu-latest
            TARGET_IMAGE: oznu/s6-node
            BASE_IMAGE: arm32v6/alpine
            DOCKERFILE: Dockerfile
            QEMU_ARCH: arm
            TAG_SUFFIX: arm32v6
            ALT_SUFFIX: armhf

          # arm64v8 builds (Alpine)
          - name: arm64v8
            os: ubuntu-latest
            TARGET_IMAGE: oznu/s6-node
            BASE_IMAGE: arm64v8/alpine
            DOCKERFILE: Dockerfile
            QEMU_ARCH: aarch64
            TAG_SUFFIX: arm64v8
            ALT_SUFFIX: aarch64

          # amd64 builds (Ubuntu)
          - name: amd64
            os: ubuntu-latest
            TARGET_IMAGE: oznu/s6-node
            BASE_IMAGE: library/ubuntu
            DOCKERFILE: Dockerfile.ubuntu
            QEMU_ARCH: x86_64
            TAG_SUFFIX: ubuntu-amd64

          # arm32v7 builds (Ubuntu)
          - name: arm32v7
            os: ubuntu-latest
            TARGET_IMAGE: oznu/s6-node
            BASE_IMAGE: arm32v7/ubuntu
            DOCKERFILE: Dockerfile.ubuntu
            QEMU_ARCH: arm
            TAG_SUFFIX: ubuntu-arm32v7
            ALT_SUFFIX: ubuntu-armhf

          # arm64v8 builds (Ubuntu)
          - name: arm64v8
            os: ubuntu-latest
            TARGET_IMAGE: oznu/s6-node
            BASE_IMAGE: arm64v8/ubuntu
            DOCKERFILE: Dockerfile.ubuntu
            QEMU_ARCH: aarch64
            TAG_SUFFIX: ubuntu-arm64v8
            ALT_SUFFIX: ubuntu-aarch64

    steps:
    # checkout repo
    - uses: actions/checkout@v2

    # setup multi-arch build support
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static:register --reset

    # get branch / tag name
    - name: Get the upload URL for a release
      id: get_release
      uses: bruceadams/get-release@v1.2.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # generate the image tag
    - name: Get Image Tag
      id: get_tag
      run: |
        export TARGET_IMAGE_TAG=$(if [ "${{ steps.get_release.outputs.tag_name }}" = "master" ]; then if [ "${{ matrix.TAG_SUFFIX }}" = "" ]; then echo "latest"; else echo "${{ matrix.TAG_SUFFIX }}"; fi; else if [ "${{ matrix.TAG_SUFFIX }}" = "" ]; then echo "${{ steps.get_release.outputs.tag_name }}"; else echo "${{ steps.get_release.outputs.tag_name }}-${{ matrix.TAG_SUFFIX }}"; fi; fi)
        echo $TARGET_IMAGE_TAG
        echo ::set-output name=NAME::${TARGET_IMAGE_TAG}

    # build the image
    - name: Build Image
      run: |
        docker build -f ${{ matrix.DOCKERFILE }} --build-arg NODE_VERSION=${{ steps.get_release.outputs.tag_name }} --build-arg BASE_IMAGE=${{ matrix.BASE_IMAGE }} --build-arg QEMU_ARCH=${{ matrix.QEMU_ARCH }} -t ${{ matrix.TARGET_IMAGE }}:${{ steps.get_tag.outputs.NAME }} .

    # push the image to docker hub
    - name: Push Image
      if: github.repository == 'oznu/docker-s6-alpine-node'
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push ${{ matrix.TARGET_IMAGE }}:${{ steps.get_tag.outputs.NAME }}

    # push alternate tags
    - name: Push Alternate Tags
      if: github.repository == 'oznu/docker-s6-alpine-node'
      run: |
        if [ -z "${{ matrix.ALT_SUFFIX }}" ]; then
          echo "No alternate tags set for this build.";
        else
          echo "Tagging with alternate tag '${{ matrix.ALT_SUFFIX }}'";
          export ALT_IMAGE_TAG=$(if [ "${{ steps.get_release.outputs.tag_name }}" = "master" ]; then if [ "${{ matrix.ALT_SUFFIX }}" = "" ]; then echo "error"; else echo "${{ matrix.ALT_SUFFIX }}"; fi; else if [ "${{ matrix.ALT_SUFFIX }}" = "" ]; then echo "${{ steps.get_release.outputs.tag_name }}"; else echo "${{ steps.get_release.outputs.tag_name }}-${{ matrix.ALT_SUFFIX }}"; fi; fi);
          docker tag ${{ matrix.TARGET_IMAGE }}:${{ steps.get_tag.outputs.NAME }} ${{ matrix.TARGET_IMAGE }}:$ALT_IMAGE_TAG;
          docker push ${{ matrix.TARGET_IMAGE }}:$ALT_IMAGE_TAG;
        fi
